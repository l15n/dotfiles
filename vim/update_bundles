#!/usr/bin/env ruby

# List of bundles to install.
# Assume that strings are git submodules, arrays are vim.org scripts
BUNDLES = {
	"fugitive" =>	"git://github.com/tpope/vim-fugitive.git",
	"ruby" =>		"git://github.com/vim-ruby/vim-ruby.git",
	"rails" =>		"git://github.com/tpope/vim-rails.git",
  "snipmate" => "git://github.com/msanders/snipmate.vim.git",
  "surround" => "git://github.com/tpope/vim-surround.git",
  "command_t" => "git://git.wincent.com/command-t.git",
  "matchit" => "git://github.com/tsaleh/vim-matchit.git",
  "cucumber" => "https://github.com/tpope/vim-cucumber.git",
  "php" => "https://github.com/vim-scripts/php.vim.git",
  "endwise" => "git://github.com/tpope/vim-endwise.git",
  "unimpaired" => "https://github.com/tpope/vim-unimpaired.git",
  "ack" => "https://github.com/mileszs/ack.vim.git",
  "html5" => "https://github.com/othree/html5.vim.git",
  "solarized" => "git://github.com/altercation/vim-colors-solarized.git",
  "ri_vim" => "git://github.com/l15n/ri-browser.git",
  "javascript" => "git://github.com/pangloss/vim-javascript.git",
  "coffeescript" => "git://github.com/kchmck/vim-coffee-script.git",
  "supertab" => "git://github.com/ervandew/supertab.git",
  "align" => "https://github.com/pix/vim-align.git",
  "indent_object" => "git://github.com/michaeljsmith/vim-indent-object.git",
  "nerdcommenter" => "git://github.com/ddollar/nerdcommenter.git",
  "conque" => "https://github.com/rson/vim-conque.git",
  "cocoa" => "https://github.com/msanders/cocoa.vim.git",
  "gist" => "https://github.com/mattn/gist-vim.git",
  "nerdtree" => "https://github.com/scrooloose/nerdtree.git",
  "jekyll" => "https://github.com/csexton/jekyll.vim.git",
  "haml" => "https://github.com/tpope/vim-haml.git",
  "jquery" => [12107, 'syntax'],
  "navajo" => [190, 'colors']
}

require 'fileutils'
require 'open-uri'
require 'pathname'

BUNDLES_DIR = Pathname.new(File.expand_path(File.join(File.dirname(__FILE__), 'bundle')))
GIT_ROOT	= Pathname.new(File.expand_path(File.join(File.dirname(__FILE__), '..')))

def plugin_dir(plugin)
  BUNDLES_DIR.join(plugin.to_s)
end

def plugin_exists?(plugin)
  Dir.exists? plugin_dir(plugin)
end

def is_git_repository?
  FileUtils.cd(GIT_ROOT) do
    system "git status > /dev/null 2>&1"
  end
end

def update_git_clone(plugin)
  puts "Updating clone #{plugin}"
  FileUtils.cd(plugin_dir(plugin).to_s) do
    system 'git pull'
  end
end

def install_git_plugin(plugin, location)
  puts "Installing #{plugin}"
  FileUtils.cd(GIT_ROOT) do
    if system "git status > /dev/null 2>&1"
      system "git submodule add #{location} #{plugin_dir(plugin).relative_path_from(GIT_ROOT)}"
    else
      system "git clone #{location} #{plugin_dir(plugin).relative_path_from(GIT_ROOT)}"
    end
  end
end

def install_from_vim_org(plugin, location)
  local_file = File.join(plugin_dir(plugin), location[1], "#{plugin}.vim")
  if Dir.exists? plugin_dir(plugin)
    puts "Updating #{plugin}"
    system "rm #{local_file}"
  else
    puts "Installing #{plugin}"
  end
  FileUtils.mkdir_p(File.dirname(local_file))
  File.open(local_file, "w") do |file|
    file << open("http://www.vim.org/scripts/download_script.php?src_id=#{location[0]}").read
  end
end

# See which plugins are already installed.
BUNDLES.each do |plugin, location|
  case location
  when String
    if plugin_exists? plugin
      if is_git_repository?
        update_git_clone(plugin, location)
      end
    else
      install_git_plugin(plugin, location)
    end
  when Array
    install_from_vim_org(plugin, location)
  else
    puts "Warning: Settings for #{plugin} are invalid:"
    p location
  end
end

FileUtils.cd(GIT_ROOT) do
  if system "git status > /dev/null 2>&1"
    puts "Registering submodules..."
    system "git submodule init"
    puts "Updating submodules..."
    system "git submodule update"
  end
end
