desc 'Clone a copy of the DataMapper repository and dependencies'
task 'dm:clone' do
  require("pathname")
  base_path = Pathname.getwd
  unless (base_path.basename.to_s == "dm") then
    base_path = (base_path + "dm")
    base_path.mkdir unless base_path.directory?
    cd(base_path)
  end
  users = { "sam" => ["extlib", "do", "dm-core", "dm-more"], "dkubb" => ["dm-dev"] }
  users.each do |user, repos|
    repos.each do |r|
      path = (base_path + r)
      next if path.directory?
      sh("git clone git://github.com/#{user}/#{r}.git")
    end
  end
end

desc 'Update your local DataMapper.  Run from inside the top-level dm directory.'
task 'dm:update', :needs => [ 'dm:clone' ] do
  ["extlib", "do", "dm-core", "dm-more", "dm-dev"].each do |r|
    puts("Updating #{r}")
    cd(r)
    sh("git fetch")
    sh("git rebase origin/master")
    cd("..")
  end
end

desc 'Uninstall all RubyGems related to DataMapper'
task 'dm:gems:wipe' do
  sudo = if ((ENV["SUDOLESS"] == "true") or RUBY_PLATFORM =~ /win32|cygwin/) then
    ""
  else
    "sudo"
  end
  ["dm-core", "dm-more", "do_sqlite3", "do_postgres", "do_mysql", "data_objects", "extlib"].each do |gem|
    if ["dm-more"].include?(gem) then
      cd(gem)
      sh("rake uninstall")
      cd("..")
    else
      sh("#{sudo} gem uninstall #{gem} --all --ignore-dependencies --executables; true")
    end
  end
end

desc 'Pull fresh copies of DataMapper and refresh all the gems'
task 'dm:gems:refresh', :needs => [ 'dm:sake:refresh', 'dm:gems:wipe', 'dm:update', 'dm:install' ] do

end

desc 'Install extlib, do, dm-core, dm-dev and dm-more'
task 'dm:install', :needs => [ 'dm:install:extlib', 'dm:install:do', 'dm:install:core', 'dm:install:dev', 'dm:install:more' ] do

end

desc 'Install extlib'
task 'dm:install:extlib' do
  cd("extlib")
  sh("rake install; true")
  cd("..")
end

desc 'Install dm-core'
task 'dm:install:core' do
  cd("dm-core")
  sh("rake install; true")
  cd("..")
end

desc 'Install dm-more'
task 'dm:install:more' do
  cd("dm-more")
  sh("rake install; true")
  cd("..")
end

desc 'Install dm-dev'
task 'dm:install:dev' do
  cd("dm-dev")
  sh("rake install; true")
  cd("..")
end

desc 'Install do drivers'
task 'dm:install:do', :needs => [ 'dm:install:extlib', 'dm:install:do:data_objects', 'dm:install:do:postgres', 'dm:install:do:mysql', 'dm:install:do:sqlite3' ] do

end

desc 'Install data_objects'
task 'dm:install:do:data_objects' do
  cd("do/data_objects")
  sh("rake install; true")
  cd("../..")
end

desc 'Install do_postgres'
task 'dm:install:do:postgres' do
  cd("do/do_postgres")
  sh("rake install; true")
  cd("../..")
end

desc 'Install do_mysql'
task 'dm:install:do:mysql' do
  cd("do/do_mysql")
  sh("rake install; true")
  cd("../..")
end

desc 'Install do_sqlite3'
task 'dm:install:do:sqlite3' do
  cd("do/do_sqlite3")
  sh("rake install; true")
  cd("../..")
end

desc 'Remove and reinstall DataMapper sake recipes'
task 'dm:sake:refresh' do
  tasks = []
  `sake -T`.each do |line|
    next unless match = line.match(/\Asake\s(dm:.+?|strip)\s/)
    (tasks << match.captures.first)
  end
  sh("sake -u #{(tasks * " ")}")
  sh("sake -i http://datamapper.org/dm-dev.sake")
end

desc 'Update the version number'
task 'dm:update:version' do
  versions = ENV.values_at("old", "new").map { |v| Regexp.escape(v) }
  sh(("find dm-core dm-more extlib/* do/* -type f -exec perl -pi -e 's/\\b%s\\b/%s/g' {} \\;" % versions))
end

desc 'Strip trailing whitespace from source files'
task 'strip' do
  require("pathname")
  require("zlib")
  files = ["capfile", "CHANGELOG", "MIT-LICENSE", "README", "README_FOR_APP", "RUNNING_UNIT_TESTS", "Rakefile", "TODO", "USAGE", ".autotest", ".gitignore"].freeze
  extensions = ["builder", "cgi", "conf", "css", "deploy", "erb", "example", "fcgi", "haml", "htc", "htm", "html", "js", "key", "opts", "php", "rake", "ratom", "rb", "rcsv", "rdf", "rhtml", "rjs", "rpdf", "rxml", "sake", "sass", "sh", "sql", "txt", "vcf", "xml", "yml"].freeze
  Pathname.getwd.find do |path|
    if ((path.directory? and ((not path.readable?) or (not path.writable?))) or [".git", ".svn"].include?(path.basename.to_s)) then
      Find.prune
    end
    unless (path.file? and (path.size? and (files.include?(path.basename.to_s) or extensions.include?(path.extname[(1..-1)])))) then
      next
    end
    document = (path.open("r") do |f|
      f.collect { |line| (line.gsub(/\G\s/, " ").rstrip + "\n") }.join.rstrip
    end + "\n")
    next if (Zlib.crc32(document) == Zlib.crc32(path.read))
    puts("Stripping whitepsace from #{path}")
    path.open("w") { |f| f.write(document) }
  end
end
